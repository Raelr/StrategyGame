[gd_resource type="ShaderMaterial" load_steps=3 format=2]

[ext_resource path="res://Sprites/LakeWaterUV.png" type="Texture" id=1]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform vec4 shadow_color : hint_color;

uniform vec2 tiled_factor = vec2(4.0,4.0);
uniform float aspect_ratio = 0.5;

uniform sampler2D uv_offset_texture : hint_black;
uniform vec2 uv_offset_scale = vec2(0.2,0.2);
uniform vec2 uv_wave_size = vec2(1.0, 1.0);
uniform vec2 time_scale = vec2(1.0, 1.0);

uniform float sine_time_scale = 1.0;
uniform vec2 sine_offset_scale = vec2(2.0, 2.0);
uniform vec2 sine_wave_size = vec2(0.05, 0.1);

vec2 calculate_waves_offset(float time, float multiplier, vec2 uv, vec2 offset_scale) {
	vec2 offset;
	float time_multiplier = time * multiplier;
	float unique_offset = uv.x + uv.y;
	offset.x = cos(time_multiplier + unique_offset * offset_scale.x);
	offset.y = sin(time_multiplier + unique_offset * offset_scale.y);
	return offset;
}

void fragment() {
	vec2 tiled_uvs = UV * tiled_factor;
	tiled_uvs.y *= aspect_ratio;
	
	vec2 uv_offset = UV * uv_offset_scale;
	uv_offset += TIME * time_scale;
	
	vec2 texture_based_offset = texture(uv_offset_texture, uv_offset).rg;
	texture_based_offset = texture_based_offset * 2.0 - 1.0;
	texture_based_offset *= uv_wave_size;
	
	vec2 waves_uv_offset = calculate_waves_offset(TIME, sine_time_scale, tiled_uvs, sine_offset_scale);
	vec2 waves_uvs = tiled_uvs + waves_uv_offset * sine_wave_size + texture_based_offset;
	float waves_height = (texture_based_offset.y + waves_uv_offset.y) * 0.25 + 0.4;
	//waves_height = min(waves_height * 1.5, 1.0);
	
	vec4 diffuse_color = texture(TEXTURE, waves_uvs);
	COLOR = mix(diffuse_color, shadow_color, waves_height);
	//COLOR = vec4(waves_height, waves_height, waves_height, 1.0);
	NORMALMAP = texture(NORMAL_TEXTURE, waves_uvs / 5.0).rgb;
}
"

[resource]
shader = SubResource( 1 )
shader_param/shadow_color = Color( 0.27451, 0.4, 0.741176, 1 )
shader_param/tiled_factor = Vector2( 1, 1 )
shader_param/aspect_ratio = 1.03529
shader_param/uv_offset_scale = Vector2( 1, 1 )
shader_param/uv_wave_size = Vector2( 0.02, 0.02 )
shader_param/time_scale = Vector2( 0.01, 0.01 )
shader_param/sine_time_scale = 0.75
shader_param/sine_offset_scale = Vector2( 10, 25 )
shader_param/sine_wave_size = Vector2( 0.01, 0.01 )
shader_param/uv_offset_texture = ExtResource( 1 )
